const pdfParse = require("pdf-parse");
const mammoth = require("mammoth");
const fs = require("fs");
const { OpenAI } = require("openai");

const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });

async function extractTextFromFile(file) {
  const ext = file.originalname.split(".").pop().toLowerCase();
  const buffer = fs.readFileSync(file.path);

  if (ext === "pdf") {
    const data = await pdfParse(buffer);
    return data.text;
  } else if (ext === "docx") {
    const result = await mammoth.extractRawText({ buffer });
    return result.value;
  } else if (ext === "txt") {
    return buffer.toString("utf-8");
  } else {
    throw new Error("Formato de arquivo n√£o suportado.");
  }
}

const basePrompt = `CONCEITUA√á√ÉO DO TRABALHO DO ASSESSOR JUR√çDICO EM UNIDADE JURISDICIONAL (C√çVEL, FAM√çLIA E ADMINISTRATIVO)
O Assessor Jur√≠dico de unidade jurisdicional presta apoio t√©cnico direto ao magistrado, auxiliando na triagem, an√°lise e elabora√ß√£o de minutas e pareceres t√©cnico-jur√≠dicos nos feitos sob sua responsabilidade. Sua atua√ß√£o abrange as √°reas de Direito Civil, Processual Civil, Direito de Fam√≠lia e Direito Administrativo, dentro da estrutura do Poder Judici√°rio.

As principais fun√ß√µes incluem:

Leitura cr√≠tica e an√°lise processual de autos f√≠sicos ou eletr√¥nicos;

Identifica√ß√£o das partes, causa de pedir e pedidos;

Delimita√ß√£o do momento processual (peti√ß√£o inicial, contesta√ß√£o, saneamento, provas, senten√ßa, fase recursal ou cumprimento de senten√ßa);

Exame de requisitos processuais e eventuais nulidades;

Enquadramento jur√≠dico da demanda com base em doutrina, legisla√ß√£o e jurisprud√™ncia;

Verifica√ß√£o de prazos, decad√™ncia, prescri√ß√£o e coisa julgada;

An√°lise de tutelas provis√≥rias, incidentes processuais e meios de defesa;

Sugerir encaminhamentos vi√°veis para despacho, decis√£o interlocut√≥ria, senten√ßa ou homologa√ß√£o.

O assessor jur√≠dico atua com imparcialidade t√©cnica, observando os princ√≠pios do contradit√≥rio, ampla defesa, celeridade, seguran√ßa jur√≠dica e legalidade, sem substitui√ß√£o da fun√ß√£o judicante, mas subsidiando o julgador com informa√ß√µes jur√≠dicas estruturadas e bem fundamentadas.

üßæ MODELO DE PROMPT PARA AN√ÅLISE JUR√çDICA EM UNIDADE JURISDICIONAL (C√çVEL/FAM√çLIA/ADMINISTRATIVO)
Prompt de An√°lise Jur√≠dico-Processual Preliminar ‚Äì Unidade Jurisdicional:

Solicito an√°lise t√©cnico-jur√≠dica estruturada sobre o seguinte processo:

N√∫mero do Processo: [informar]

Classe Processual e Assunto: [ex: a√ß√£o de cobran√ßa, revis√£o contratual, guarda, alimentos, improbidade administrativa]

Documentos Relevantes Anexados: [ex: peti√ß√£o inicial, contesta√ß√£o, r√©plica, provas documentais, laudos, pareceres]

Partes Envolvidas: [ex: autor Fulano, r√©u Sicrano, advogados, intervenientes]

Momento Processual: [ex: fase postulat√≥ria, instru√ß√£o, decis√£o interlocut√≥ria pendente, senten√ßa, fase de cumprimento]

Pedidos Formulados: [resumo objetivo dos pedidos do autor e eventual reconven√ß√£o ou defesa do r√©u]

Prazos ou Quest√µes Urgentes: [ex: risco de perecimento de direito, prazo de contesta√ß√£o, prescri√ß√£o, pedido de tutela antecipada]

Quest√£o Central: [ex: validade de cl√°usula contratual, necessidade de alimentos provis√≥rios, compet√™ncia, litispend√™ncia, interesse de agir]

Requer-se que o parecer contenha:

Identifica√ß√£o das quest√µes controvertidas;

Exame da presen√ßa de pressupostos processuais e condi√ß√µes da a√ß√£o;

Fundamentos jur√≠dicos aplic√°veis (legisla√ß√£o, doutrina e jurisprud√™ncia);

Sugest√£o fundamentada para eventual despacho, decis√£o ou senten√ßa (se for o caso);

An√°lise de poss√≠veis incidentes processuais (ex: tutela, incidente de desconsidera√ß√£o, provas pendentes, etc.).

Finalidade: subsidiar tecnicamente o(a) juiz(a) na condu√ß√£o processual, com fundamento jur√≠dico claro, objetivo e respeitando os princ√≠pios da imparcialidade e da fun√ß√£o jurisdicional.`

async function fetchGPTResponse(area, content) {
  const userPrompt = `
√Årea jur√≠dica: ${area}
Descri√ß√£o do caso: ${content}
`;

  const completion = await openai.chat.completions.create({
    model: "gpt-4",
    messages: [
      { role: "system", content: basePrompt },
      { role: "user", content: userPrompt },
    ],
  });

  return completion.choices[0].message.content;
}

async function analyzePrompt({ file }) {
  const text = await extractTextFromFile(file);
  return text;
}

module.exports = { analyzePrompt, fetchGPTResponse };
